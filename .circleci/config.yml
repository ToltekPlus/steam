# PHP CircleCI 2.0 configuration file
# See: https://circleci.com/docs/2.0/language-php/
version: 2

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.4-node-browsers
        #specify system properties
        environment:
          DB_ROOT_USER: root
          DB_HOST: '127.0.0.1'
          DB_NAME: 'steam'
          DB_USER: 'root'
          DB_PASSWORD: ''
          # Customize the JVM maximum heap limit
          MAVEN_OPTS: -Xmx3200m
          # Specify our database service here
          # CircleCI maintains a library of pre-built images
      - image: circleci/mysql:8.0
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_ROOT_PASSWORD: ''
          DB_HOST: '127.0.0.1'
          DB_NAME: 'steam'
          DB_USER: 'root'
          DB_PASSWORD: ''
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-install zip

      #install mysql client
      - run: sudo apt-get install default-mysql-client
      - run: sudo docker-php-ext-install pdo_mysql
      - run: sudo docker-php-ext-enable pdo_mysql
      # create databases
      - run: mysql -h 127.0.0.1 -u root -e "create database steam"

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package.json" }}
            - node-v1-
      - run: yarn install
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run: cp .env.example .env
      - run: ./vendor/bin/phinx migrate
      - run: ./vendor/bin/phinx seed:run -s MainSeeder
